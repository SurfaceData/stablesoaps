datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("MIGRATION_DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  roles         String    @default("general")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Ingredient {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  // Values:
  // - base_oil
  // - essential_oil
  // - lye
  // - water
  type        String
  // Values:
  // - grams
  // - milliliters
  measurement String

  // Lye details
  lyeType String?

  // Base Oil details
  saponification Json?

  // Essential Oil details
  notes String[]

  ingredientPurchase IngredientPurchase[]
  inventoryItem      InventoryItem[]
  recipeWaterItem    RecipeWaterItem[]
  recipeLyeItem      RecipeLyeItem[]
  recipeBaseItem     RecipeBaseItem[]
  recipeScentItem    RecipeScentItem[]
}

model InventoryItem {
  id           Int        @id @default(autoincrement())
  ingredientId Int        @unique
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
}

model IngredientPurchase {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  price        Float

  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?
}

model PurchaseOrder {
  id           Int                  @id @default(autoincrement())
  // Values:
  // - created
  // - shipped
  // - completed
  status       String
  total        Float
  createDate   DateTime
  receiveDate  DateTime?
  supplierName String
  items        IngredientPurchase[]
}

model RecipeWaterItem {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  recipe       Recipe[]
}

model RecipeLyeItem {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  recipe       Recipe[]
}

model RecipeBaseItem {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  recipe       Recipe?    @relation(fields: [recipeId], references: [id])
  recipeId     Int?
}

model RecipeScentItem {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  recipe       Recipe?    @relation(fields: [recipeId], references: [id])
  recipeId     Int?
}

model Recipe {
  id         Int             @id @default(autoincrement())
  name       String
  slug       String          @unique
  originName String
  water      RecipeWaterItem @relation(fields: [waterId], references: [id])
  waterId    Int
  lye        RecipeLyeItem   @relation(fields: [lyeId], references: [id])
  lyeId      Int

  baseOils      RecipeBaseItem[]
  essentialOils RecipeScentItem[]
  batch         Batch[]
}

model Batch {
  id             Int              @id @default(autoincrement())
  createDate     DateTime
  recipeId       Int
  recipe         Recipe           @relation(fields: [recipeId], references: [id])
  amount         Float
  numBars        Int
  batchSoapLabel BatchSoapLabel[]
}

model LabelScenePrompt {
  id             Int              @id @default(autoincrement())
  sceneId        Int
  prompt         String
  theme          String
  batchSoapLabel BatchSoapLabel[]
}

model LabelStyle {
  id             Int              @id @default(autoincrement())
  name           String
  text           String
  batchSoapLabel BatchSoapLabel[]
}

model BatchSoapLabel {
  id          Int    @id @default(autoincrement())
  prompt      String
  magicCode   String @unique
  imagePathRg String
  imagePathMd String
  imagePathSm String

  batchId      Int
  batch        Batch            @relation(fields: [batchId], references: [id])
  labelSceneId Int
  labelScene   LabelScenePrompt @relation(fields: [labelSceneId], references: [id])
  labelStyleId Int
  labelStyle   LabelStyle       @relation(fields: [labelStyleId], references: [id])
}
